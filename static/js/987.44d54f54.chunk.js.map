{"version":3,"file":"static/js/987.44d54f54.chunk.js","mappings":"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","sources":["webpack://social.network/./src/components/Profile/profileInfo/ProfileInfo.module.css?e4e4","webpack://social.network/./src/components/Profile/profileStatus/ProfileStatus.module.css?6736","components/Profile/profileStatus/ProfileStatus.tsx","components/Profile/profileDataForm/ProfileDataForm.tsx","components/Profile/profileInfo/ProfileInfo.tsx","webpack://social.network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social.network/./src/components/Profile/MyPosts/post/Post.module.css?04d2","components/Profile/MyPosts/post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__kp-uZ\",\"mainPhoto\":\"ProfileInfo_mainPhoto__-DvV2\",\"contact\":\"ProfileInfo_contact__I5mNZ\",\"formSummaryError\":\"ProfileInfo_formSummaryError__Fimri\"};","// extracted by mini-css-extract-plugin\nexport default {\"div\":\"ProfileStatus_div__NLOeU\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport classes from \"./ProfileStatus.module.css\";\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    profileStatus: string\r\n    updateUserStatusTC: (profileStatus: string) => void\r\n}\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.profileStatus)\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    let activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    let deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatusTC(status)\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.profileStatus)\r\n    }, [props.profileStatus])\r\n\r\n    return (\r\n        <div>\r\n            {editMode && <div>\r\n                <input onChange={onChangeHandler} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n            </div>}\r\n            {!editMode && <div className={classes.div}>\r\n              status:  <span onClick={activateEditMode}>{props.profileStatus || \"------\"}</span>\r\n            </div>}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport {Input, Textarea} from \"../../commons/formControls/FormsControls\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {UserProfilePropsType} from \"../../../redux/profile-reducer\";\r\nimport classes from \"../profileInfo/ProfileInfo.module.css\";\r\nimport {Button} from \"@mui/material\";\r\n\r\nexport const ProfileDataForm: React.FC<InjectedFormProps<FormDataProfileType>> = (props) => {\r\n\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Button variant=\"contained\">save</Button></div>\r\n            <div>\r\n                {props.error && <div className={classes.formSummaryError}>{props.error}</div>}\r\n            </div>\r\n                <div>\r\n                    <b>Full Name: </b> <Field placeholder={\"fullName\"} component={Input} name={\"fullName\"}/>\r\n                </div>\r\n                <div>\r\n                    <b>About me:</b> <Field placeholder={\"aboutMe\"} component={Textarea} name={\"aboutMe\"}/>\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job: </b> <Field placeholder={\"LookingForAJob\"} component={Input} name={\"LookingForAJob\"} type={'checkbox'}/>\r\n                </div>\r\n                <div>\r\n                        <div><b>My professional skills:</b>\r\n                            <Field placeholder={\"lookingForAJobDescription\"} component={Textarea} name={\"lookingForAJobDescription\"}/>\r\n                        </div>\r\n                </div>\r\n                <div>\r\n\r\n                    <b>Contacts:</b> {Object.keys(\r\n                    // @ts-ignore\r\n                        props.initialValues.contacts\r\n                ).map(key => {\r\n                    return <div className={classes.contact}>\r\n                    <b>{key}: <Field placeholder={key} component={Input} name={\"contacts.\" + key}/> </b>\r\n                    </div>\r\n                })}\r\n                </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport type FormDataProfileType = {\r\n    aboutMe: string\r\n    userId: number\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        github?: string\r\n        vk?: string\r\n        facebook?: string\r\n        instagram?: string\r\n        twitter?: string\r\n        website?: null | string\r\n        youtube?: null | string\r\n        mainLink?: null | string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport const ProfileReduxForm = reduxForm<FormDataProfileType>({\r\n    form: 'profileEdit'\r\n})(ProfileDataForm)\r\n","import React, {useState} from 'react';\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport {UserProfilePropsType} from \"../../../redux/profile-reducer\";\r\nimport {LoaderInfinity} from \"../../loader/LoaderInfinity\";\r\nimport {ProfileStatus} from \"../profileStatus/ProfileStatus\";\r\nimport userPhoto from \"../../../assets/images/user.webp\"\r\nimport {ProfileReduxForm} from \"../profileDataForm/ProfileDataForm\";\r\nimport {Button, Input, TextField} from \"@mui/material\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    userProfile: UserProfilePropsType\r\n    profileStatus: string\r\n    updateUserStatusTC: (profileStatus: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfileTC: (profile: UserProfilePropsType) => void\r\n}\r\n\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (profile: UserProfilePropsType) => {\r\n        props.saveProfileTC(profile)\r\n        setEditMode(false)\r\n    }\r\n\r\n    if (!props.userProfile) {\r\n        return <LoaderInfinity/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={props.userProfile.photos.large || userPhoto} className={classes.mainPhoto}/>\r\n                <div>\r\n                    {props.isOwner && <TextField type={'file'} onChange={onMainPhotoSelected}/>}\r\n                </div>\r\n                {editMode\r\n                    ? <ProfileReduxForm initialValues={props.userProfile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(props.isOwner)\r\n                    }} isOwner={props.isOwner} userProfile={props.userProfile}/>}\r\n                <ProfileStatus profileStatus={props.profileStatus} updateUserStatusTC={props.updateUserStatusTC}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// @ts-ignore\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\n\r\ntype ProfileDataType = {\r\n    userProfile: UserProfilePropsType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData = (props: ProfileDataType) => {\r\n    return (\r\n        <div>\r\n            {props.isOwner && <div>\r\n                <Button color={'secondary'} variant=\"contained\" onClick={props.goToEditMode}>edit</Button>\r\n            </div>}\r\n            <div>\r\n                <b>Full Name: </b>{props.userProfile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>About me:</b> {props.userProfile.aboutMe ? props.userProfile.aboutMe : '-----'}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job: </b> {props.userProfile.lookingForAJob ? \"Yes\" : \"No\"}\r\n            </div>\r\n            <div>\r\n                {props.userProfile.lookingForAJob &&\r\n                    <div>\r\n                        <b>My professional skills:</b> {props.userProfile.lookingForAJobDescription}</div>\r\n                }\r\n            </div>\r\n            <div className={classes.contact}>\r\n                <b>Contacts:</b> {Object.keys(props.userProfile.contacts).map(key => {\r\n                // @ts-ignore\r\n                return <Contact key={key} contactTitle={key} contactValue={props.userProfile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__GDSIZ\",\"posts\":\"MyPosts_posts__4RLJJ\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__7FNRR\"};","import React from 'react';\r\nimport classes from \"./Post.module.css\";\r\n\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likeCount: number\r\n\r\n}\r\n\r\n\r\n\r\nexport const Post = (props:PostPropsType) => {\r\n    return (\r\n            <div className={classes.item}>\r\n                <img src={'https://cs4.pikabu.ru/post_img/2016/05/23/11/1464032137128579754.jpg'}/>\r\n                {props.message}\r\n                <div>\r\n                    <span>like {props.likeCount}</span>\r\n                </div>\r\n                <div>\r\n\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport classes from \"./MyPosts.module.css\";\r\nimport {Post} from \"./post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../../commons/formControls/FormsControls\";\r\nimport {Button, TextField} from \"@mui/material\";\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    const postsElements = props.profilePage.posts.map((p, index) => {\r\n        return (\r\n            <div>\r\n                <Post key={index} message={p.message} likeCount={p.likeCount}/>\r\n                <Button color={'secondary'} variant=\"contained\" onClick={()=> props.deletePostAC(p.id)}>DELETE</Button>\r\n            </div>\r\n\r\n\r\n        )\r\n    })\r\n\r\n    let addPost = (formData: FormDataType) => {\r\n        props.addPost(formData.post)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postBlock}>\r\n            <div>\r\n                <h3>My Posts</h3>\r\n                <AddPostReduxForm onSubmit={addPost}  />\r\n            </div>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport type FormDataType = {\r\n    post: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const addPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <TextField\r\n                    color={'secondary'}\r\n                       placeholder={'Enter your text'}\r\n                      label={'My post'}\r\n                       variant=\"standard\"\r\n\r\n                />\r\n            </div>\r\n            <div>\r\n                <Button type={\"submit\"} color={'secondary'} variant=\"contained\">Add post</Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddPostReduxForm = reduxForm<FormDataType>({\r\n    form: 'post'\r\n})(addPostForm)","import React from 'react';\r\nimport {addPostAC, deletePostAC, InitialStateProfileType} from \"../../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {MyPosts} from \"./MyPosts\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profilePage: InitialStateProfileType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newText: string) => void\r\n    deletePostAC: (postId: number) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n    addPost: addPostAC,\r\n    deletePostAC\r\n}) (MyPosts)\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {ProfileInfo} from \"./profileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {UserProfilePropsType} from \"../../redux/profile-reducer\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\ntype ProfileProsType = {\r\n    userProfile: UserProfilePropsType\r\n    profileStatus: string\r\n    updateUserStatusTC: (profileStatus: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfileTC: (profile: UserProfilePropsType) => void\r\n}\r\n\r\nexport const Profile = (props: ProfileProsType) => {\r\n\r\n\r\n\r\n    return (\r\n        <StyledDiv>\r\n            <div>\r\n                <ProfileInfo saveProfileTC={props.saveProfileTC}\r\n                             savePhoto={props.savePhoto}\r\n                             isOwner={props.isOwner} userProfile={props.userProfile}\r\n                             profileStatus={props.profileStatus}\r\n                             updateUserStatusTC={props.updateUserStatusTC}/>\r\n            </div>\r\n            <div style={{ paddingRight: 200 }}>\r\n                <MyPostsContainer/>\r\n            </div>\r\n        </StyledDiv>\r\n    );\r\n};\r\n\r\n\r\n\r\nconst StyledDiv = styled.div`\r\n   display: flex;\r\n  justify-content: space-between;\r\n`","import React from 'react';\r\nimport {\r\n    getProfileTC,\r\n    getUserStatusTC,\r\n    savePhotoTC,\r\n    saveProfileTC,\r\n    updateUserStatusTC,\r\n    UserProfilePropsType\r\n} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {getCaptchaUrlTC} from \"../../redux/auth-reducer\";\r\nimport {Profile} from \"./Profile\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    userProfile: UserProfilePropsType\r\n    profileStatus: string\r\n    authorizedUserId: null | string\r\n    isAuth: boolean | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getProfileTC: (userId: string) => void\r\n    getUserStatusTC: (userId: string) => void\r\n    updateUserStatusTC: (profileStatus: string) => void\r\n    savePhotoTC: (file: File) => void\r\n    saveProfileTC: (profile: UserProfilePropsType) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string | undefined\r\n}\r\n\r\nexport type ProfileUserPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileUserPropsType\r\n\r\nclass ProfileContainerC extends React.Component<PropsType> {\r\n\r\n\r\n    refreshProfile = () => {\r\n        let userId =  /*this.props.authorizedUserId*/ this.props.match.params.userId\r\n        if (!userId) {\r\n            return   userId === this.props.authorizedUserId\r\n            if(!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getProfileTC(userId)\r\n        this.props.getUserStatusTC(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(this.props.match.params.userId != prevProps.match.params.userId) {\r\n          return   this.refreshProfile\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <Profile saveProfileTC={this.props.saveProfileTC} savePhoto={this.props.savePhotoTC}\r\n                isOwner={!this.props.match.params.userId}\r\n                userProfile={this.props.userProfile}\r\n                profileStatus={this.props.profileStatus}\r\n                updateUserStatusTC={this.props.updateUserStatusTC}/>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n\r\n    return {\r\n        // @ts-ignore\r\n        userProfile: state.profilePage.userProfile,\r\n        // @ts-ignore\r\n        profileStatus: state.profilePage.profileStatus,\r\n        // @ts-ignore\r\n        authorizedUserId: state.auth.id,\r\n        // @ts-ignore\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getProfileTC,\r\n        getUserStatusTC,\r\n        updateUserStatusTC,\r\n        savePhotoTC,\r\n        saveProfileTC\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainerC)\r\n\r\n\r\n\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean | null\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        // @ts-ignore\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n   const RedirectComponent = (props: MapStatePropsType) => {\r\n\r\n       const {isAuth, ...resProps} = props\r\n\r\n       if(!isAuth) return <Redirect to={'/login'} />\r\n\r\n       return <Component {...resProps as T} />\r\n   }\r\n\r\n   const ConnectedRedirectComponent = connect(mapStateToProps) (RedirectComponent)\r\n\r\n   return ConnectedRedirectComponent\r\n};\r\n"],"names":["ProfileStatus","props","useState","editMode","setEditMode","profileStatus","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatusTC","className","classes","onClick","ProfileReduxForm","reduxForm","form","onSubmit","handleSubmit","Button","variant","error","Field","placeholder","component","Input","name","Textarea","type","Object","keys","initialValues","contacts","map","key","ProfileInfo","userProfile","src","photos","large","userPhoto","isOwner","TextField","target","files","length","savePhoto","profile","saveProfileTC","ProfileData","goToEditMode","LoaderInfinity","Contact","contactTitle","contactValue","color","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Post","message","likeCount","MyPosts","React","postsElements","profilePage","posts","p","index","deletePostAC","id","AddPostReduxForm","formData","addPost","post","maxLengthCreator","label","MyPostsContainer","connect","state","addPostAC","Profile","StyledDiv","style","paddingRight","styled","ProfileContainerC","refreshProfile","userId","match","params","authorizedUserId","getProfileTC","getUserStatusTC","this","prevProps","prevState","snapshot","savePhotoTC","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToProps","Component","resProps","to"],"sourceRoot":""}