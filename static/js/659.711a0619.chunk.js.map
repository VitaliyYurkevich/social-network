{"version":3,"file":"static/js/659.711a0619.chunk.js","mappings":"8KACA,GAAgB,QAAU,yBAAyB,eAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCQpMA,EAAa,SAACC,GAEvB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,gBAAKC,UAAWC,EAAAA,OAAiB,IAAMA,EAAAA,OAAvC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCPzBC,EAAU,SAACP,GACpB,OACI,gBAAKG,UAAWC,EAAAA,QAAhB,SAAkCJ,EAAMQ,W,iDCoC1CC,GAAcC,EAAAA,EAAAA,GAAiB,IAoBxBC,GAAsBC,EAAAA,EAAAA,GAAwB,CACvDC,KAAM,UADyBD,EAlBsC,SAACZ,GAEtE,OACI,kBAAMc,MAAO,CAACC,SAAU,SAAUC,SAAUhB,EAAMiB,aAAlD,WACI,0BAAK,SAACC,EAAA,EAAD,CACDC,YAAa,qBACbC,UAAWC,EAAAA,GACXf,KAAM,SACNgB,SAAU,CAACC,EAAAA,EAAUd,QAGzB,0BACI,SAACe,EAAA,EAAD,CAAQC,KAAM,SAAUC,MAAO,YAAaC,QAAQ,YAApD,kC,6BChChB,GAAeC,E,QAAAA,IACXC,EAAAA,GACAC,EAAAA,EAAAA,KAVoB,SAACC,GAErB,MAAO,CACHC,YAAaD,EAAMC,YACnBC,OAAQF,EAAMG,KAAKD,UAME,CACrBE,YAAaC,EAAAA,IAHrB,EDlBuB,SAACpC,GAOpB,OACI,iBAAKG,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,YAAhB,SACKJ,EAAMgC,YAAYK,QAAQC,KAAI,SAACC,EAAGC,GAE/B,OACI,SAACzC,EAAD,CAAwBO,KAAMiC,EAAEjC,KAAMJ,GAAIqC,EAAErC,IAA3BsC,SAI7B,gBAAKrC,UAAWC,EAAAA,SAAhB,SACKJ,EAAMgC,YAAYS,SAASH,KAAI,SAACI,EAAGF,GAChC,OACI,SAACjC,EAAD,CAAqBC,QAASkC,EAAElC,SAAlBgC,SAI1B,gBAAK1B,MAAO,CAAC6B,UAAW,IAAKC,WAAY,KAAzC,UACI,SAACjC,EAAD,CAAqBK,SAtBb,SAAC6B,GACjB7C,EAAMmC,YAAYU,EAASC,oB,gIEL7BC,EAAkB,SAAChB,GACrB,MAAO,CAEHE,OAAQF,EAAMG,KAAKD,SAKpB,SAASJ,EAAoBmB,GAajC,OAFmClB,EAAAA,EAAAA,IAAQiB,EAARjB,EATT,SAAC9B,GAEvB,IAAOiC,EAAuBjC,EAAvBiC,OAAWgB,GAAlB,OAA8BjD,EAA9B,GAEA,OAAIiC,GAEG,SAACe,GAAD,UAAeC,KAFH,SAAC,KAAD,CAAU5C,GAAI","sources":["webpack://social.network/./src/components/dialogs/Dialogs.module.css?04a9","components/dialogs/dialogItem/DialogItem.tsx","components/dialogs/message/Message.tsx","components/dialogs/Dialogs.tsx","components/dialogs/DialogsContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__9Ft4h\",\"dialogs-item\":\"Dialogs_dialogs-item__CjO6E\",\"dialog\":\"Dialogs_dialog__xVqhE\",\"active\":\"Dialogs_active__+bUvi\",\"messages\":\"Dialogs_messages__WGlzp\",\"message\":\"Dialogs_message__O6+PH\"};","import React from 'react';\r\nimport classes from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n\r\n    let path = '/dialogs/' + props.id\r\n\r\n    return(\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport classes from \"../Dialogs.module.css\";\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport classes from \"./Dialogs.module.css\";\r\nimport {DialogItem} from \"./dialogItem/DialogItem\";\r\nimport {Message} from \"./message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../commons/formControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../utils/validators/validators\";\r\nimport {Button} from \"@mui/material\";\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n\r\n    let addNewMessage = (formData: FormDataType) => {\r\n        props.sendMessage(formData.dialog)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItem}>\r\n                {props.dialogsPage.dialogs.map((d, index) => {\r\n\r\n                    return (\r\n                        <DialogItem key={index} name={d.name} id={d.id}/>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                {props.dialogsPage.messages.map((m, index) => {\r\n                    return (\r\n                        <Message key={index} message={m.message}/>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div style={{marginTop: 300, marginLeft: 300}}>\r\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport type FormDataType = {\r\n    dialog: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form style={{position: 'fixed'}} onSubmit={props.handleSubmit}>\r\n            <div><Field\r\n                placeholder={'Enter your message'}\r\n                component={Textarea}\r\n                name={'dialog'}\r\n                validate={[required, maxLength50]}\r\n            />\r\n            </div>\r\n            <div>\r\n                <Button type={'submit'} color={'secondary'} variant=\"contained\" >Send message</Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageReduxForm = reduxForm<FormDataType>({\r\n    form: 'dialog'\r\n})(AddMessageForm)\r\n\r\n","import React from 'react';\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {InitialStateDialogsType, sendMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: InitialStateDialogsType\r\n    isAuth: boolean | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (body: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {\r\n        sendMessage: sendMessageAC\r\n    })\r\n) (Dialogs)\r\n\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean | null\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        // @ts-ignore\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n   const RedirectComponent = (props: MapStatePropsType) => {\r\n\r\n       const {isAuth, ...resProps} = props\r\n\r\n       if(!isAuth) return <Redirect to={'/login'} />\r\n\r\n       return <Component {...resProps as T} />\r\n   }\r\n\r\n   const ConnectedRedirectComponent = connect(mapStateToProps) (RedirectComponent)\r\n\r\n   return ConnectedRedirectComponent\r\n};\r\n"],"names":["DialogItem","props","path","id","className","classes","to","name","Message","message","maxLength50","maxLengthCreator","AddMessageReduxForm","reduxForm","form","style","position","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","Button","type","color","variant","compose","withAuthRedirect","connect","state","dialogsPage","isAuth","auth","sendMessage","sendMessageAC","dialogs","map","d","index","messages","m","marginTop","marginLeft","formData","dialog","mapStateToProps","Component","resProps"],"sourceRoot":""}